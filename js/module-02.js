/* Масиви
Масив - структура даних для зберігання і маніпулювання колекцією індексованих значень. Використовується для зберігання впорядкованих колекцій даних, наприклад, списку курортів, товарів, клієнтів в готелі тощо.

Створення
Масив оголошується і береться у квадратні дужки [] - літералом масиву. Всередині дужок кожен елемент масиву розділяється комою.
*/

// const clients = ["Mango", "Poly", "Ajax"];

/* Доступ до елементів
Для доступу до значення елемента масиву використовується синтаксис квадратних дужок масив[індекс]. Між іменем змінної, що зберігає масив, і квадратними дужками не повинно бути пробілу. */

// const clients = ["Mango", "Poly", "Ajax"];

// // зазначаючи в дужках індекс елемента, ми отримуємо значення

// console.log(clients[0]);
// console.log(clients[1]);
// console.log(clients[2]);

//Індексація елементів масиву починається з нуля.

/* Перевизначення
На відміну від рядків, елементи масиву можна змінювати, звернувшись до них за індексом і присвоївши інше значення */

// const clients = ["Mango", "Poly", "Ajax"];
// clients[0] = "Kiwi";
// clients[1] = "Pango";
// console.log(clients); // ["Kiwi", "Pango", "Ajax"]

/* Довжина масиву
Довжина масиву, тобто кількість його елементів, зберігається у властивості length. Це динамічна величина, яка змінюється автоматично під час додавання або видалення елементів. */

// const clients = ["Mango", "Poly", "Ajax"];
// console.log(clients.length); // 3

/* Індекс останнього елемента
Найчастіше, ми заздалегідь не знаємо яка буде довжина масиву в коді. Для того, щоб отримати значення останнього елемента, застосовується наступний підхід - довжина масиву завжди на одиницю більша, ніж індекс останнього елемента. Використовуючи формулу довжина_масиву - 1, можна отримати значення останнього елемента масиву довільної довжини. */

// const clients = ["Mango", "Poly", "Ajax"];
// const lastElementIndex = clients.length -1;
// console.log(lastElementIndex); // 2
// console.log(clients[lastElementIndex]); // "Ajax"

/* Ітерація по масиву
Цикл for можна використовувати для ітерації по масиву, тобто «перебрати» його поелементно. */

// const clients = ["Mango", "Ajax", "Poly"];

// for (let i = 0; i < clients.length; i++){
//     console.log(clients[i]);
// }

/* Для доступу до елементів використовується синтаксис квадратних дужок масив[індекс], де індекс - це значення лічильника циклу від 0 і до останнього індексу масиву, тобто менше, але не дорівнює його довжині. */

/* Цикл for...of
Конструкція for...of оголошує цикл, що перебирає ітерабельні об'єкти, як-от масиви і рядки. Тіло циклу буде виконуватися для значення кожного елемента. Це хороша заміна циклу for, якщо не потрібен доступ до лічильника ітерації.

for (const variable of iterable){
    // тіло циклу
}

variable — змінна, яка буде зберігати значення елемента на кожній ітерації.
iterable — колекція, яка містить ітерабельні (що можна порахувати) елементи, наприклад масив.
*/

// const clients = ["Mango", "Ajax", "Poly"];

// for (const client of clients){
//     console.log(client);
// }

// const string = "javascript";

// for (const character of string){
//     console.log(character);
// }


/* Оператори break і continue
Будемо шукати ім'я клієнта в масиві імен, якщо знайшли - перериваємо цикл, оскільки немає сенсу шукати далі, імена у нас унікальні. */

// const clients =  ["Mango", "Poly", "Ajax"];
// const clientNameToFind = "Poly";
// let message;

// for (const clent of clients){
//     if(clent === clientNameToFind){
//   // На кожній ітерації будемо перевіряти чи збігається елемент масиву з
//   // іменем клієнта. Якщо збігається - записуємо в message повідомлення
//   // про успіх і робимо break, щоб далі не шукати
//         message = "Клієнт з таки ім'ям є в базі даних!";
//         break;
//     }
    
//     // Якщо вони не збігаються - записуємо в message повідомлення про відсутність імені
//     message = "Клієнт з таким ім'ям відсутній в базі даних!";
// }

// console.log(message); // "Клієнт з таким ім'ям є в базі даних!"

/* Можна на початку задати message значення невдачі пошуку, а в циклі перезаписати його на успіх, якщо знайшли ім'я. Але break все одно нам знадобиться, оскільки, якщо у нас масив із 10000 клієнтів, а потрібний нам знаходиться на 2 позиції, то немає абсолютно жодного сенсу перебирати інші 9998 елементи. */

// const clients = ["Mango", "Poly", "Ajax"];
// const clientNameToFind = "Poly";
// let message = "Клієнт з таким ім'ям відсутній в базі даних!";

// for (const client of clients){
//     if(client === clientNameToFind){
//         message = "Клієент з таким ім'ям є в базі даних!";
//         break;
//     }
//     // Якщо не збігається, то на цій ітерації нічого не робимо
// }

// console.log(message); // Клієент з таким ім'ям є в базі даних!

/* Використовуємо цикл для виведення тільки чисел, більших за певне значення. */

// const numbers = [1, 3, 14, 18, 4, 7, 29, 6, 34];
// const threshold = 15;

// Для чисел, менших ніж порогове значення, спрацьовує continue, виконання тіла
// припиняється і управління передається на наступну ітерацію.

// for (let i = 0; i < numbers.length; i++){
//     if (numbers[i] <threshold){
//         continue;
//     }
    
//     console.log(`Число більше за ${threshold}: ${numbers[i]}`); // 18, 29, 34
// }

/* Присвоєння за посиланням і за значенням
Фундаментальною відмінністю складних типів від примітивів є те, як вони зберігаються і копіюються. Примітиви: рядки, числа, булі, null і undefined, під час присвоєння повністю копіюються за значенням (by value).

Зі складними типами - все по-іншому. У змінній, якій присвоєно масив або об'єкт, зберігається не саме значення, а адреса його місця в пам'яті, іншими словами - посилання (вказівник) на нього і вони передаються за посиланням (by reference).

Уявімо змінну у вигляді аркушу паперу. Її значення ми уявимо як запис на цьому аркуші. 

Якщо ми захочемо повідомити зміст цього запису користувачам, то можемо це зробити наступним чином - зробити фізичні копії і вручити кожному, тобто зробити багато незалежних копій (присвоєння за значенням).

Або покласти аркуш в зачиненій кімнаті і дати користувачам ключ від цієї кімнати, тобто один екземпляр із загальним доступом (присвоєння за посиланням).

Тепер змінимо дані на аркуші паперу - значення змінної. Очевидно, що відвідувачі кімнати завжди будуть бачити зміни, які ми вносимо, оскільки змінюється оригінал і вони мають до нього доступ. І також очевидно, що власники паперових копій не помітять змін, дивлячись на свої копії.

За умови передачі за значенням, змінним виділяється нова комірка пам'яті і в неї копіюються дані. Аналогія з багатьма копіями паперового аркушу має цілком реальне втілення, окремий аркуш для кожної копії.

За умови передачі за посиланням, замість створення нового об'єкта, змінній присвоюється посилання (вказівник) на вже існуючий об'єкт, тобто на його місце в пам'яті. Таким чином, декілька змінних можуть вказувати на один і той самий об'єкт, за аналогією із закритою кімнатою, вони мають ключ доступу до оригіналу аркушу.

Усі примітивні типи присвоюються за значенням, тобто створюється копія.
*/

// let a = 5;
// // Присвоєння за значенням, в пам'яті буде створена ще
// // одна комірка, в яку буде скопійоване значення 5
// let b = a;
// console.log(a); // 5
// console.log(b); // 5

// // Змінимо значення a
// a = 10;
// console.log(a); // 10
// // Значення b не змінилося, оскільки це окрема копія
// console.log(b); // 5

/* Складні типи - об'єкти, масиви, функції присвоюються за посиланням, тобто змінна просто отримує посилання на вже існуючий об'єкт. */

// const a = ["Mango"];
// // Оскільки a - це масив, в b записується посилання на вже існуючий
// // масив в пам'яті. Тепер a і b вказують на той самий масив.
// const b = a;
// console.log(a); // ["Mango"]
// console.log(b); // ["Mango"]

// // Змінимо масив, додавши ще один елемент, використовуючи вказівник з a
// a.push("Poly");
// console.log(a); // ["Mango", "Poly"]

// // b також змінилось, тому що b, як і a,
// // просто містить посилання на те ж саме місце в пам'яті
// console.log(b); // ["Mango", "Poly"]

// // Результат повторюється
// b.push("Ajax");
// console.log(a); // ["Mango", "Poly", "Ajax"]
// console.log(b); // ["Mango", "Poly", "Ajax"]

/* Методи масиву
Методи split() і join()
Метод split(delimiter) перетворює рядок в масив, «розбиваючи» його роздільником delimiter. Якщо роздільник - це порожній рядок, то створиться масив окремих символів. Роздільником може бути один або декілька символів. */

// const name = "Mango";
// console.log(name.split("")); // ['M', 'a', 'n', 'g', 'o']

// const message = "JavaScript - це цікаво";
// console.log(message.split(" ")); // ['JavaScript', '-', 'це', 'цікаво']

/* Метод масивів join(delimiter) об'єднує елементи масиву у рядок. У рядку елементи будуть розділені символом або групою символів, зазначених в delimiter. Тобто ця операція протилежна методу рядків split(delimiter). */

// const words = ["JavaScript", "це", "цікаво"];
// console.log(words.join(""));  // "JavaScriptцецікаво"
// console.log(words.join(" ")); // "JavaScript це цікаво"
// console.log(words.join("-")); // "JavaScript-це-цікаво"

/* Метод indexOf()
indexOf(value) повертає перший індекс, в якому елемент зі значенням value був знайдений в масиві, або число -1, якщо такий елемент відсутній. Використовуйте indexOf тоді, коли необхідно отримати сам індекс елемента. */

// const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
// console.log(clients.indexOf("Poly")); // 2
// console.log(clients.indexOf("Monkong")); // -1

/* Метод includes()
includes(value) перевіряє, чи містить масив елемент зі значенням value і повертає true або false відповідно. Застосування цього методу корисне в ситуаціях, коли необхідно перевірити, чи є елемент в масиві і не важлива його позиція (індекс). */

// const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
// console.log(clients.includes("Poly")); //true
// console.log(clients.includes("Monkong")); //false

/* Перевірка багатьох умов з includes()
На перший погляд код наступного прикладу виглядає добре. */

// const fruit = "apple";

// if (fruit === "apple" || fruit === "strawberry"){
//     console.log("It is a red fruit!");
// }

/* Однак, що робити, якщо у нас буде більше червоних фруктів, наприклад, ще вишня (cherry) або журавлина (cranberries)? Чи будемо ми розширювати умову за допомогою додаткових ||? */

// const fruit = "apple";

// if(
//     fruit === "apple" ||
//     fruit === "strawberry" ||
//     fruit === "cherry" ||
//     fruit === "cramberries"
// ) {
//     console.log("It is a red fruit!");
// }

/* Можемо переписати умову, використовуючи includes(), це дуже просто і масштабовано */

// // Виносимо варіанти в масив
// const redFruits = ["apple", "strawberry", "cherry", "cranberries"];
// const fruit = "cherry";
// // Перевіряємо присутність елемента
// const hasFruit = redFruits.includes(fruit);

// if (hasFruit){
//     console.log(`${fruit} is a red fruit!`);
// }

/* Методи push() і pop()
Додають або видаляють крайні елементи масиву. Працюють тільки з крайнім лівим і крайнім правим елементом, і не можуть вставити або видалити елемент з довільної позиції. 

Метод push() додає один або декілька елементів наприкінці масиву, без необхідності зазначати індекси елементів, що додаються. Повертає довжину масиву після додавання елементів.
*/

// const numbers = [];

// numbers.push(1);
// console.log(numbers); // [1]

// numbers.push(2);
// console.log(numbers); // [1, 2]

// numbers.push(3);
// console.log(numbers); // [1, 2, 3]

// numbers.push(4);
// console.log(numbers); // [1, 2, 3, 4]

// numbers.push(5);
// console.log(numbers); // [1, 2, 3, 4, 5]


/* Метод pop() видаляє останній елемент з кінця масиву і  повертає видалений елемент. Якщо масив порожній, метод повертає undefined */

// const numbers = [1, 2, 3, 4, 5];

// console.log(numbers.pop()); // 5
// console.log(numbers); // [1, 2, 3, 4]

// console.log(numbers.pop()); // 4
// console.log(numbers); // [1, 2, 3] 

// console.log(numbers.pop()); // 3
// console.log(numbers); // [1, 2]

// console.log(numbers.pop()); // 2
// console.log(numbers); // [1]

// console.log(numbers.pop()); // 1
// console.log(numbers) // []

/* Метод slice()
slice(begin, end) повертає новий масив, що містить копію частини вихідного масиву, не змінюючи його. Копія створюється з begin і до, але не включно, end - індекси елементів вихідного масиву. */

// const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
// console.log(clients.slice(1, 3)); // ["Mango", "Ajax"]

/* Якщо begin і end не зазначені, буде створена повна копія вихідного масиву. */

// const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
// console.log(clients.slice()); // ["Mango", "Ajax", "Poly", "Kiwi"]

/* Якщо не зазначено end, копіювання буде зі start і до кінця вихідного масиву. */

// const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
// console.log(clients.slice(1)); // ["Ajax", "Poly", "Kiwi"]
// console.log(clients.slice(2)); // ["Poly", "Kiwi"]

/* Якщо значення start від'ємне, а end не зазначено - будуть скопійовані останні start елементи */

// const clients = ["Mango", "Ajax", "Poly", "Kiwi"];
// console.log(clients.slice(-2)); // ["Poly", "Kiwi"]

/* Метод splice()
Швейцарський ніж для роботи з масивами, якщо вихідний масив необхідно змінити. Видаляє, додає і замінює елементи у довільному місці масиву.

Видалення
Щоб видалити елементи в масиві, передаються два аргументи.

splice(position, num)

position - вказує на позицію (індекс) першого елемента для видалення
num - визначає кількість елементів, що видаляються

Метод splice змінює вихідний масив і повертає масив, що містить видалені елементи. Наприклад, у нас є масив оцінок, який містить п'ять чисел від 1 до 5. */

// const scores = [1, 2, 3, 4, 5];

// // Видаляємо три елементи масиву, починаючи з першого елемента (індекс 0)
// const deletedScores = scores.splice(0, 3);

// // Тепер масив scores містить два елементи
// console.log(scores);

// // А масив deletedScores містить три видалені елементи
// console.log(deletedScores);

/* На практиці, значення, що повертається (масив видалених елементів), використовується рідко. Переважно, просто необхідно видалити елементи з масиву */

/* Додавання
Для того, щоб додати один або декілька елементів в масив, необхідно передати три або більше аргументи, за такої умови, другий аргумент повинен дорівнювати нулю.

splice(position, 0, new_element_1, new_element_2, ...)

Аргумент position вказує початкову позицію в масиві, куди будуть вставлені нові елементи.

Другий аргумент - це нуль, він говорить методу не видаляти елементи в місці додавання нових.

Третій, четвертий і всі наступні аргументи - це нові елементи, які додаються в масив.

Наприклад, у нас є масив з назвами кольорів у вигляді рядків. Додамо новий колір перед елементом з індексом 2. */

// const colors = ["red", "green", "blue"];
// colors.splice(2, 0, "purpul");
// console.log(colors); // ['red', 'green', 'purpul', 'blue']

/* Можна додати довільну кількість елементів, передавши четвертий, п'ятий аргумент тощо. */

// const colors = ["red", "green", "blue"];

// colors.splice(1, 0, "yellow", "pink");
// console.log(colors) // ["red", "yellow", "pink", "green", "blue"]

/* Заміна
Заміна - це операція додавання, в якій видаляються елементи в місці додавання нових. Для цього необхідно передати мінімум три аргументи. Кількість елементів, що видаляються і додаються, може не збігатися.

splice(position, num, new_element_1, new_element_2, ...)

position - вказує на позицію (індекс) першого елемента для видалення
num - визначає кількість елементів, що видаляються

Третій, четвертий і всі наступні аргументи - це нові елементи, які додаються в масив.
Наприклад, у нас є масив мов програмування з чотирьох елементів. */

// const languages = ["C", "C++", "Java", "JavaScript"];

// // Заміняємо елемент з індексом 1 на новий
// languages.splice(1, 1, "Phyton"); 
// console.log(languages); // ["C", "Phyton", "Java", "JavaSctipt"]

// // Заміняємо один елемент (з індексом 2) на декілька
// languages.splice(2, 1, "C#", "Swift", "Go");
// console.log(languages); // ["C", "Phyton", "C#", "Swift", "Go", "JavaSctipt"]

/* Метод concat()
Об'єднує два або більше масивів в один. Він не змінює масив, на якому викликається, а повертає новий. Порядок аргументів методу впливає на порядок елементів нового масиву. */

// const oldClients = ["Mango", "Ajax", "Poly", "Kiwi"];
// const newClients = ["Monkong", "Singu"];

// const allClientsWithOldFirst = oldClients.concat(newClients);
// console.log(allClientsWithOldFirst); // ["Mango", "Ajax", "Poly", "Kiwi", "Monkong", "Singu"]

// const allClientsWithNewFirts = newClients.concat(oldClients);
// console.log(allClientsWithNewFirts); // ["Monkong", "Singu", "Mango", "Ajax", "Poly", "Kiwi"]

// console.log(oldClients); // ["Mango", "Ajax", "Poly", "Kiwi"]
// console.log(newClients); // ["Monkong", "Singu"]

// Task-1
// Напиши скрипт який буде перебирати масив та видаляти з 
// нього (мутувати) 
// всі елементи що не є типом даних Number.

// const arr = [3, 'Hello', null, 42, false];

/* Варіант один */
// for(let i = 0; i < arr.length; i++){
//     if(typeof arr[i] !== "number"){
//         arr.splice(i, 1);
//         i--
//     }
// }
// console.log(arr);


/* Варіант два */
// for (let i = arr.length -1; i >= 0; i--){
//     if(typeof arr[i] !== "number"){
//         arr.splice(i, 1);
//     }
// }
// console.log(arr);


// Task-2
// Потрібно створити функцію яка буде приймати 1 параметр
// Функція повина відібрати з масиву тільки ті елементи що
// дублюються в ньому та повернути їх в вигляді нового масиву як 
// результат виконання функції

/* Варіант один */
// function getCommonElements(arr){
//     const uniqueItemsArr = [];
//     const repeatItemsArr = [];
//     for(const item of arr){
//         if(uniqueItemsArr.includes(item)){
//             repeatItemsArr.push(item);
//         }
//         uniqueItemsArr.push(item);
//     }
//     return repeatItemsArr;
// }

/* Варіант два */
// function getCommonElements(arr){
//     const result = [];
//     for(let i = 0; i < arr.length; i++){
//         if(arr.includes(arr[i], i+1)){
//             result.push(arr[i]);
//         }
//     }
//     return result;
// }

// console.log(getCommonElements([1, 2, 3, 2, 1, 17, 19]));
// console.log(getCommonElements([1,2,3,4,4,5]));
// console.log(getCommonElements(["red", "yellow", "green", "red", "blue"]));

// Task-3
//Потрібно створити функцію яка буде приймати 2 параметри
//1 параметр це масив всіх юзерів
//2 параметр це масив з чоловічими іменами.
//Функція повина відібрати з масиву всіх юзерів лише жіночі імена та повернути їх в результаті свого виконання.

// const users = ['Artem', 'Anna', 'Larisa', 'Maksim', 'Svetlana', 'David', 'Roman', 'Olga'];
// const men = ['Artem', 'Maksim', 'David', 'Roman'];

/* Варіант перший */
// function filterOnlyWoman(arrFirst, arrSecond){
//     const filteredArr = [];
//     for(const user of arrFirst){
//         if(arrSecond.includes(user)){
//             continue;
//         }
//         filteredArr.push(user);
//     }
//     return filteredArr;
// }
// console.log(filterOnlyWoman(users, men));

/* Варіант другий */
// function getWomen(users, men) {
//     const women = []

//     for(const user of users) {
//         if(!men.includes(user)) {
//             women.push(user)
//         }
//     }
//     return women
// }

// console.log(getWomen(users, men));

// Task-4 - Масиви та рядки
// Напиши скрипт, який «розгортає» рядок 
// (зворотний порядок літер) 
// і виводить його в консоль.

// const string = 'Welcome to the future';
// const result = string.split("").reverse().join("");
// console.log(result);

// Task-5
// Напиши скрипт який буде перевіряти чи елементи в масиві 
// розташовані в порядку зростання,
// якщо ні то замінювати елементи на вірнi
// const numbers = [1, 2, 3, 12, 5, 6, 1, 1, 9]

// // numbers.sort(function(a, b){
// //     return a - b;
// // });

// numbers.sort((a, b) => a-b);

// console.log(numbers);



// Task-6
// Напиши функцію яка на основі масиву користувачів що 
// поставили 
// лайк формує та повертає рядок.
// Функція має повернути текст, як вказано у прикладах:

// []                                -->  "no one likes this"
// ["Peter"]                         -->  "Peter likes this"
// ["Jacob", "Alex"]                 -->  "Jacob and Alex like this"
// ["Max", "John", "Mark"]           -->  "Max, John and Mark like this"
// ["Alex", "Jacob", "Mark", "Max"]  -->  "Alex, Jacob and 2 others like this"

// function createStr (arr){
//     let message;
//     switch(arr.length){
//         case 0:
//             message = "no one likes this";
//             break;
//         case 1:
//             message = `${arr[0]} likes this`;
//             break;
//         case 2:
//             message = `${arr[0]} and ${arr[1]} like this`;
//             break;
//         case 3:
//             message = `${arr[0]}, ${arr[1]} and ${arr[2]} like this`
//             break;
//         default:
//             message = `${arr[0]}, ${arr[1]} and ${arr.length - 2} others like this`
//     }
//     return message;
// }
// console.log(createStr([]));
// console.log(createStr(["Peter"]));
// console.log(createStr(["Jacob", "Alex"]));
// console.log(createStr(["Max", "John", "Mark"]));
// console.log(createStr(["Mark", "Alex", "Jacob", "Mark"]));


/* Функції
Функція - це підпрограма, незалежна частина коду, призначена для багаторазового виконання конкретної задачі з різними початковими значеннями. Функції дозволяють структурувати великі програми, зменшують повторення та ізолюють код.

Функцію можна уявити у вигляді чорного ящика: вона отримує щось на вході (дані), і повертає щось на виході (результат виконання коду всередині неї). */

/* Оголошення функції 
// 1. Оголошення функції multiply
function multiply() {
  // Тіло функції
  console.log("Це лог на момент виклику функції multiply");
}

// 2. Виклики функції multiply
multiply(); // 'Це лог на момент виклику функції multiply'
multiply(); // 'Це лог на момент виклику функції multiply'
multiply(); // 'Це лог на момент виклику функції multiply'

Оголошення функції (function declaration) починається з ключового слова function, після якого стоїть ім'я - дієслово, що відповідає на запитання «Що зробити?» і пара круглих дужок.

Тіло функції береться у фігурні дужки {} і містить інструкції, які необхідно виконати на момент її виклику. Потім, коли необхідно, функція викликається за допомогою імені і пари круглих дужок.
*/

/* Параметри та аргументи
В круглих дужках після імені функції зазначаються параметри - перелік даних, які функція очікує на момент виклику. */

// Оголошення параметрів x, y, z
// function multiply(x, y, z) {
//     console.log(`Результат множення дорівнює ${x * y * z}`);
// }

/* Параметри - це локальні змінні, доступні тільки у тілі функції. Вони розділяються комами. Параметрів може бути декілька, або взагалі не бути, у такому випадку записуються просто порожні круглі дужки.

Параметри будуть створюватися кожного разу під час виконання функції, і їх окремі інкарнації жодним чином один з одним не пов'язані.

На момент виклику функції, в круглих дужках можна передати аргументи - значення для оголошених параметрів функції.
*/

// 1. Оголошення параметрів x, y, z
// function multiply(x, y, z) {
//     console.log(`Результат множення дорівнює ${x * y * z}`);
//   }
  
//   // 2. Передача аргументів
//   multiply(2, 3, 5); // Результат множення дорівнює 30
//   multiply(4, 8, 12); // Результат множення дорівнює 384
//   multiply(17, 6, 25); // Результат множення дорівнює 2550

/* Порядок передачі аргументів повинен відповідати порядку оголошених параметрів: значення першого аргументу буде присвоєно першому параметру, другого аргументу - другому параметру тощо. Якщо параметрів буде більше, ніж аргументів, то параметрам без значень буде присвоєно undefined. */

/* Повернення значення
Оператор return використовується для передачі значення з тіла функції у зовнішній код. Коли інтерпретатор зустрічає return, він відразу ж виходить з функції (припиняє її виконання), і повертає вказане значення у те місце коду, де була викликана функція.
*/

// function multiply(x, y, z){
//     console.log("КОд до return виконується звичайним чином");

//     //Повертаємо результат виразу множення
    
//     return x * y * z;

//     console.log("Цей лог ніколи не виконається, він стоїть після return");
// }

// //результат роботи функції можна зберегти у змінну

// let result = multiply(2, 3, 5);
// console.log(result) // 30

// result = multiply(4, 8, 12);
// console.log(result); // 384

// result = multiply(17, 6, 25);
// console.log(result); // 2550

/* Оператор return без явно вказаного значення повертає спеціальне значення undefined. За відсутності return в тілі функції, вона все одно поверне undefined. */

/* Порядок виконання коду
Коли інтерпретатор зустрічає виклик функції (або методу), він призупиняє виконання поточного коду і починає виконувати код з тіла функції. Після того як увесь код функції буде виконаний, інтерпретатор виходить з тіла функції, повертаючись у те місце, звідки прийшов, і продовжує виконувати код, наступний після виклику функції.
 
function multiply(x, y, z) {
  console.log(`Результат множення дорівнює ${x * y * z}`);
}

console.log("Лог до виклику функції multiply");
multiply(2, 3, 5); // Результат множення дорівнює 30
console.log("Лог після виклику функції multiply");

// Послідовність логів в консолі
// "Лог до виклику функції multiply"
// "Результат множення дорівнює 30"
// "Лог після виклику функції multiply"
*/

/* Параметри за замовчуванням
Іноді необхідно оголосити функцію, у параметрів якої будуть значення, відмінні від undefined, навіть якщо для них не передали аргументи. Це робиться дуже простим та очевидним чином - достатньо вказати значення за замовчуванням безпосередньо на момент оголошення параметрів у підписі функції. У випадку такого запису, якщо для параметра не було передано значення аргументу, використовується значення за замовчуванням. */

// function count(contForm = 0, countTo = 10, step = 1){
//     console.log(`countForm = ${contForm}, countTo = ${countTo}, step = ${step}`);

//     for (let i = contForm; i <= countTo; i += step){
//         console.log(i);
//     }
// }

// count(1, 5); // countFrom = 1, countTo = 5, step = 1
// count(2); // countFrom = 2, countTo = 10, step = 1
// count(); // countFrom = 0, countTo = 10, step = 1

/* Псевдомасив arguments
Доступ до списку всіх аргументів можна отримати за допомогою спеціальної змінної arguments, яка доступна тільки всередині функції і зберігає всі аргументи у якості псевдомасиву.

Псевдомасив - колекція з властивістю length і можливістю звернутися до елементу за індексом, але відсутністю більшості методів для роботи з масивом.

Розглянемо приклад використання arguments у функції, яка множить будь-яку кількість аргументів: 
*/

// function multiply() {
//   let total = 1;

//   for (const argument of arguments) {
//     total *= argument;
//   }

//   return total;
// }

// console.log(multiply(1, 2, 3)); //  6
// console.log(multiply(1, 2, 3, 4)); //  24
// console.log(multiply(1, 2, 3, 4, 5)); //  120

/* Перетворення псевдомасиву
Зазвичай псевдомасив необхідно перетворити у повноцінний масив, оскільки у псевдомасиву відсутні методи масиву, наприклад slice() або includes(). На практиці застосовують декілька основних способів.

Використовуючи метод Array.from(), який створить масив із псевдомасиву. 

function fn() {
  // Змінна args буде містити повноцінний масив
  const args = Array.from(arguments);
}

Використовуючи операцію ... (rest), вона дозволяє зібрати будь-яку кількість елементів, у нашому випадку аргументів, в масив, і зберегти його в змінну. Збираємо всі аргументи, використовуючи операцію rest безпосередньо в підписі функції.

function fn(...args) {
  // Змінна args буде містити повноцінний масив
}

Операція rest детальніше розглядається далі на курсі, тут показаний один з її можливих варіантів застосування.
*/

/* Патерн «Раннє повернення»
Оператор if...else - це основний спосіб створення розгалужень. Проте, складні вкладені розгалуження роблять код заплутаним для розуміння.

Створимо функцію, яка обробляє зняття коштів з особистого рахунку в банку. Вона отримує суму для зняття і поточний баланс рахунку, після чого, залежно від умови, виконує необхідний блок коду. */


// function withdraw(amount, balance){
//     if(amount === 0){
//         console.log("Для проведення операції введіть суму більше за нуль");
//     } else if (amount > balance){
//         console.log("Недостатньо коштів на рахунку");
//     } else {
//         console.log("Операція зняття коштів проведена успішно");
//     }
// }

// withdraw(0, 300); // "Для проведення операції введіть суму більшу за нуль"
// withdraw(500, 300); // "Недостатньо коштів на рахунку"
// withdraw(100, 300); // "Операція зняття коштів проведена успішно"

/* Навіть у такому простому прикладі є група вкладених умовних операторів, серед яких не одразу можна зрозуміти логіку виконання коду.

У функції може бути більше одного оператора return. Головне пам'ятати, що виконання функції переривається, коли інтерпретатор зустрічає повернення, і увесь код після нього буде проігнорований в поточному виконанні функції.

Патерн «Раннє повернення» - це спосіб використовувати можливість дострокового повернення з функції за допомогою оператора return. Використовуючи цей прийом, ми отримуємо чистіший, плоскіший і зрозуміліший код, який простіше рефакторити.

Виділимо всі перевірки умов в окремі оператори if, після чого додамо код, що знаходиться в тілі else. В ідеальному випадку, повинен вийти плоский список умовних операторів, що йдуть один за одним, а в кінці - блок, який виконається тільки у тому випадку, якщо не виконається жоден if. */

// function withdraw(amount, balance) {
//     // Якщо умова виконується, викликається console.log
//     // і вихід із функції. Код після тіла if не виконається.
//     if (amount === 0) {
//       console.log("Для проведення операції введіть суму більшу за нуль");
//       return;
//     }
  
//     // Якщо умова першого if не виконалась, його тіло пропускається
//     // та інтерпретатор доходе до другого if.
//     // Якщо умова виконується, викликається console.log і вихід із функції.
//     // Код, що знаходиться після тіла if, не виконається.
//     if (amount > balance) {
//       console.log("Недостатньо коштів на рахунку");
//       return;
//     }
  
//     // Якщо жоден із попередніх if не виконався,
//     // інтерпретатор доходить до цього коду і виконує його.
//     console.log("Операція зняття коштів проведена");
//   }
  
//   withdraw(0, 300); // "Для проведення операції введіть суму більшу за нуль"
//   withdraw(500, 300); // "Недостатньо коштів на рахунку"
//   withdraw(100, 300); // "Операція зняття коштів проведена"

/* Функціональний вираз
Функціональний вираз (function expression) - звичайне оголошення змінної, значенням якої буде функція. Альтернативний спосіб оголошення функції. 

// Оголошення функції (function declaration)
function multiply(x, y, z) {
  console.log(`Результат множення дорівнює ${x * y * z}`);
}

// Функціональний вираз (function expression)
const multiply = function (x, y, z) {
  console.log(`Результат множення дорівнює ${x * y * z}`);
};
*/

/* Різниця в тому, що функціональний вираз не можна викликати до місця його створення, тільки після нього, тому що це буквально оголошення const змінної. */

//  // ❌ Помилка! Не працює виклик до оголошення
// multiply(1, 2, 3);

// const multiply = function (x, y, z) {
//   console.log(`Результат множення дорівнює ${x * y * z}`);
// };

// // ✅ Працює виклик після оголошення
// multiply(4, 5, 6); 

/**
A оголошення функції можна викликати до місця її створення в коді.
*/

// // ✅ Працює виклик до оголошення
// multiply(1, 2, 3);

// function multiply(x, y, z) {
//   console.log(`Результат множення дорівнює ${x * y * z}`);
// }

// // ✅ Працює виклик після оголошення
// multiply(4, 5, 6);

/* Не важливо, який синтаксис використовувати, важливо, щоб код в проекті був однорідним. Тобто необхідно намагатися не змішувати оголошення функції з функціональними виразами. */

/* Область видимості
Область видимості (scope) - механізм, який визначає доступність змінних у коді, що виконується.

Ланцюжок областей видимості (scope chain) - області видимості утворюють ієрархію, за якою дочірні області мають доступ до змінних з батьківських областей, але не навпаки.


Змінну видно для коду, що виконується, якщо вона є у поточній області видимості або в ланцюжку областей видимості. */

/* Глобальна область видимості
Змінні, оголошені на найвищому рівні, тобто за межами будь-яких конструкцій на зразок if, while, for і функцій, знаходяться в глобальній області видимості і доступні всюди після їх оголошення. */

// const globalValue = 10;

// console.log(globalValue); // 10

// function foo() {
//   console.log(globalValue); // 10
// }

// for (let i = 0; i < 5; i++) {
//   console.log(globalValue); // 10

//   if (i === 2) {
//     console.log(globalValue); // 10
//   }
// }

/* Блокова область видимості
Змінні, оголошені всередині інструкцій if, for, функцій та інших блоків коду, взятих у фігурні дужки {}, знаходяться в блоковій області видимості і доступні тільки всередині цього блоку коду або у блоках, вкладених в нього. */

// function foo() {
//     const a = 20;
//     console.log(a); // 20
  
//     for (let i = 0; i < 5; i++) {
//       console.log(a); // 20
  
//       if (i === 2) {
//         console.log(a); // 20
//       }
//     }
//   }
  
//   // ❌ Помилка! Змінна a - недоступна у глобальній області видимості
//   console.log(a);
  
//   for (let i = 0; i < 3; i++) {
//     // ❌ Помилка! Змінна a - недоступна в цій області видимості
//     console.log(a);
//   }

/* Це можна уявити у вигляді будинку з кімнатами. Будинок знаходиться в глобальній області видимості. Кожна функція і блок створюють нову кімнату, вкладену всередину будинку. Змінні, оголошені всередині цих кімнат, доступні тільки тоді, коли ви знаходитесь всередині цієї кімнати. За межами кімнати ці змінні - недоступні. */

// for (let i = 0; i < 5; i++) {
//     const a = 20;
//     console.log(a); // 20
  
//     if (i === 2) {
//       const b = 30;
//       console.log(a); // 20
//       console.log(b); // 30
//     }
  
//     if (i === 3) {
//       console.log(a); // 20
  
//       // ❌ Помилка! Змінна b - недоступна в цій області видимості
//       console.log(b);
//     }
//   }

/* Пошук за ланцюжком областей видимості
Інтерпретатор намагається спочатку знайти змінну в тій області видимості, в якій до неї звернулися. Якщо така змінна у локальній області видимості - відсутня, то він виходить назовні, на один рівень за одну спробу, доки не знайде значення або не дійде до найвищої області видимості (глобальної) і зрозуміє, що змінну з таким ідентифікатором неможливо знайти, тому що її просто не існує, у такому випадку виникне помилка того, що змінна не оголошена. */

/* Стек викликів
На момент виклику функції, всередині її тіла можуть викликатися інші функції, а в них - інші тощо. JavaScript - однопотокова мова, тобто за одну одиницю часу може виконуватись лише одна інструкція. Це означає, що викликані функції, які не завершили своє виконання, повинні чекати виконання функцій, викликаних всередині них, для того, щоб продовжити свою роботу. */

// function fnA() {
//     console.log("Лог всередині функції fnA до виклику fnB");
//     fnB();
//     console.log("Лог всередині функції fnA після виклику fnB");
//   }
  
//   function fnB() {
//     console.log("Лог всередині функції fnB");
//   }
  
//   console.log("Лог до виклику fnA");
//   fnA();
//   console.log("Лог після виклику fnA");
  
//   // "Лог до виклику fnA"
//   // "Лог всередині функції fnA до виклику fnB"
//   // "Лог всередині функції fnB"
//   // "Лог всередині функції fnA після виклику fnB"
//   // "Лог після виклику fnA "

/* Потрібен механізм зберігання списку функцій, які були викликані, але ще не завершили своє виконання, і механізм керування порядком виконання цих функцій - саме за це відповідає стек викликів (call stack). */


/* Стек
Стек - структура даних, яка працює за принципом LIFO (Last-In-First-Out), тобто останнім прийшов - першим пішов. Останнє, що додається у стек, буде видалено з нього першим, - тому можна додати або видалити елементи тільки з верхівки стека.

Уявіть стек у вигляді масиву, у якого є тільки методи pop і push, тобто можна додати або видалити тільки елемент в кінці колекції. */

/* Стек викликів
Стек викликів (call stack) - це механізм для відстеження поточного місцезнаходження інтерпретатора в коді, який викликає декілька функцій. Яка із функцій виконується на цей момент, які функції викликаються всередині функції, що виконується, яка функція буде викликана наступною тощо.

Коли скрипт викликає функцію, інтерпретатор додає її в стек викликів і починає виконання.
Будь-які функції, викликані функцією, що виконується, додаються у стек викликів і виконуються, щойно відбувається їх виклик.
Коли виконання функції завершено, інтерпретатор знімає її зі стека викликів і відновлює виконання коду з тієї точки, де зупинився до цього. Тобто починає виконуватися функція, запис якої наступний у стеку.

Stack frame (кадр стека, запис стека) - структура, яка додається у стек на момент виклику функції. Зберігає службову інформацію, наприклад, ім'я функції і номер рядка, в якому був виклик. */


// function bar() {
//     console.log("bar");
//   }
  
//   function baz() {
//     console.log("baz");
//   }
  
//   function foo() {
//     console.log("foo");
//     bar();
//     baz();
//   }
  
//   foo();

/* Коли виконується цей код, спочатку викликається foo(), потім всередині foo() викликається bar(), а потім - baz(). Виклики console.log() так само враховуються, адже - це функція. На ілюстрації нижче, для прикладу, покроково зображений стек викликів. */

/* Переповнення стека викликів
Стек викликів - не безмежний, йому відводиться кінцевий об'єм пам'яті. Іноді в консолі можна побачити помилку "Uncaught RangeError: Maximum call stack size exceeded" - переповнення стека (stack overflow).

Це може статися у випадку неправильного використання рекурсії або зациклення викликів функцій, тобто, якщо відбуваються нескінченні виклики функцій і результат не повертається, - стек збільшується. Така помилка виникне після досягнення ліміту кількості записів стека, і скрипт «падає». */